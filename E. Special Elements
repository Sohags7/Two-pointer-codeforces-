#include<bits/stdc++.h>
#define ll  long long 
#define ld  long double 
#define ff first
#define ss second
#define pb push_back
#define pf push_front
#define vec vector
#define min_heap priority_queue <ll, vector<ll>, greater<ll> >
#define all(v) v.begin(),v.end()
#define allr(v) v.rbegin(),vine present(container, element)(container.find(element) != container.end())
#define cpresent(container, element)(find(all(container), element) != container.end())
#define gcd(a,b) __gcd(a,b)
#define     max3(a,b,c)     max(a,max(b,c))
#define     max4(a,b,c,d)   max(max3(a,b,c),d)
#define     min3(a,b,c)     min(a,min(b,c))
#define     min4(a,b,c,d)   min(a,min3(b,c,d))
#define er cout<<-1<<endl;
#define  fast ios_base::sync_with_stdio(false);cin.tie(NULL);
#define  mod 1000000007     // 1e9+7
#define pi 3.1415926536
#define REP(i,a,b) for (int i = a; i <= b; i++)
#define fset(n) __builtin_ffs(n)
#define trailzerobit(n) __builtin_ctz(n)
using namespace std;
    //debbug
template < typename F, typename S >
  ostream & operator << (ostream & os, const pair < F, S > &p)
{
  return os << "(" << p.first << ", " << p.second << ")";
}
 
template < typename T >
  ostream & operator << (ostream & os, const vector < T > &v)
{
  os << "{";
  for (auto it = v.begin (); it != v.end (); ++it)
    {
      if (it != v.begin ())
    os << ", ";
      os << *it;
    }
  return os << "}";
}
 
template < typename T >
  ostream & operator << (ostream & os, const set < T > &v)
{
  os << "[";
  for (auto it = v.begin (); it != v.end (); ++it)
    {
      if (it != v.begin ())
    os << ", ";
      os << *it;
    }
  return os << "]";
}
 
template < typename T >
  ostream & operator << (ostream & os, const multiset < T > &v)
{
  os << "[";
  for (auto it = v.begin (); it != v.end (); ++it)
    {
      if (it != v.begin ())
    os << ", ";
      os << *it;
    }
  return os << "]";
}
 
template < typename F, typename S >
  ostream & operator << (ostream & os, const map < F, S > &v)
{
  os << "[";
  for (auto it = v.begin (); it != v.end (); ++it)
    {
      if (it != v.begin ())
    os << ", ";
      os << it->first << " = " << it->second;
    }
  return os << "]";
}
 
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
 
void
faltu ()
{
  cerr << endl;
}
 
template < typename T > void
faltu (T a[], int n)
{
  for (int i = 0; i < n; ++i)
    cerr << a[i] << ' ';
  cerr << endl;
}
 
template < typename T, typename ... hello > void
faltu (T arg, const hello & ... rest)
{
  cerr << arg << ' ';
  faltu (rest ...);
}               //debug
 
void no ()
{
  cout << "NO" << endl;
}
 
void yes ()
{
  cout << "YES" << endl;
 
 
}
 
ll power (ll base, ll x)
{
  ll s = 1;
  for (ll i = 1; i <= x; i++)
    {
      s = (s*base);
 
    }
  return s;
 
}
bool poweroftwo(ll x)
{
   return !(x&(x-1ll));
 
}
 
ll lcm(ll x,ll y)
{
  return (x*y)/__gcd(x,y);
 
}
 
 
int dx[] = {0, 0, +1, -1};
int dy[] = {+1, -1, 0, 0};

 
const int mxi = 2e5+50;

#define MAXN 1000002
 
// stores smallest prime factor for every number
ll spf[MAXN];
 
// Calculating SPF (Smallest Prime Factor) for every
// number till MAXN.
// Time Complexity : O(nloglogn)
void sieve()
{
    spf[1] = 1;
    for (ll i = 2; i < MAXN; i++)
 
        // marking smallest prime factor for every
        // number to be itself.
        spf[i] = i;
 
    // separately marking spf for every even
    // number as 2
    for (ll i = 4; i < MAXN; i += 2)
        spf[i] = 2;
 
    for (ll i = 3; i * i < MAXN; i++) {
        // checking if i is prime
        if (spf[i] == i) {
            // marking SPF for all numbers divisible by i
            for (ll j = i * i; j < MAXN; j += i)
 
                // marking spf[j] if it is not
                // previously marked
                if (spf[j] == j)
                    spf[j] = i;
        }
    }
}
 
// A O(log n) function returning primefactorization
// by dividing by smallest prime factor at every step
vector<ll> getFactorization(ll x)
{
    vector<ll> ret;
    while (x != 1) {
        ret.push_back(spf[x]);
        x = x / spf[x];
    }
    return ret;
}
   


 
void solve()
{
  
  ll n;
  cin>>n;
  ll a[n+5]={0};

  for(int i=1;i<=n;i++)
  {
    cin>>a[i];
  }
  ll ans=0;

  for(int k=1;k<=n;k++)
  {
    ll target=a[k];
  int i=1;
  int j=1;

ll sum=0;

bool ok=0;


  while(j<=n)
  {
    sum+=a[j];
    

    while(i<=n  && target<sum)
    {
    sum-=a[i];
    i++;

    }
     if(sum==target && (j-i+1)>=2 )
    {
      ok=1;

    }
  
    j++;

  }
  if(ok)ans++;
  
  

  }

  cout<<ans<<endl;


 


}




int main ()
{

  #ifndef ONLINE_JUDGE
freopen ("input.txt","r", stdin);
freopen ("out.txt","w", stdout);
 #endif


  ios_base::sync_with_stdio(false);
  cin.tie(NULL); 
 sieve();
 
int t;cin>>t;for(ll i=1;i<=t;i++)
solve();

return 0;
 
}
